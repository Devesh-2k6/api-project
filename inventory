import tkinter as tk
from tkinter import messagebox
import pandas as pd
import numpy as np

class InventoryManager:
    def __init__(self):
        self.inventory = []
        self.alert_messages = []

    def add_new_product(self, id, name, stock, reorder_level, lead_days, sales_history):
        product = {
            'id': id,
            'name': name,
            'stock': stock,
            'reorder_level': reorder_level,
            'lead_days': lead_days,
            'sales_history': sales_history
        }
        self.inventory.append(product)

    def get_stock_level(self, id):
        for item in self.inventory:
            if item['id'] == id:
                return item['stock']
        return None

    def generate_reorder_alerts(self):
        self.alert_messages.clear()
        for item in self.inventory:
            if item['stock'] < item['reorder_level']:
                self.alert_messages.append(f"Reorder needed for {item['name']} (ID: {item['id']})")
        return self.alert_messages

    def compute_reorder_levels(self):
        for item in self.inventory:
            avg_daily_sales = np.mean(item['sales_history'])
            reorder_level = avg_daily_sales * item['lead_days']
            reorder_quantity = avg_daily_sales * (item['lead_days'] + 7)
            item['reorder_level'] = reorder_level
            item['reorder_quantity'] = reorder_quantity

    def create_reports(self):
        turnover = {}
        stockout_count = 0
        excess_costs = 0

        for item in self.inventory:
            turnover[item['name']] = np.sum(item['sales_history']) / item['stock']
            if item['stock'] < item['reorder_level']:
                stockout_count += 1
            if item['stock'] > 1.5 * item['reorder_level']:
                excess_costs += item['stock'] - item['reorder_level']

        return turnover, stockout_count, excess_costs

class InventoryManagerUI:
    instance = None

    def __new__(cls, *args, **kwargs):
        if not cls.instance:
            cls.instance = super().__new__(cls)
        return cls.instance

    def __init__(self, root):
        if hasattr(self, 'root'):
            return
        self.root = root
        self.root.title("Inventory Manager System")

        self.manager = InventoryManager()
        self.setup_widgets()

    def setup_widgets(self):
        tk.Label(self.root, text="Product ID:").grid(row=0, column=0)
        self.id_entry = tk.Entry(self.root)
        self.id_entry.grid(row=0, column=1)

        tk.Label(self.root, text="Product Name:").grid(row=1, column=0)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(row=1, column=1)

        tk.Label(self.root, text="Initial Stock:").grid(row=2, column=0)
        self.stock_entry = tk.Entry(self.root)
        self.stock_entry.grid(row=2, column=1)

        tk.Label(self.root, text="Reorder Level:").grid(row=3, column=0)
        self.reorder_entry = tk.Entry(self.root)
        self.reorder_entry.grid(row=3, column=1)

        tk.Label(self.root, text="Lead Time (days):").grid(row=4, column=0)
        self.lead_time_entry = tk.Entry(self.root)
        self.lead_time_entry.grid(row=4, column=1)

        tk.Label(self.root, text="Sales History (comma-separated):").grid(row=5, column=0)
        self.sales_history_entry = tk.Entry(self.root)
        self.sales_history_entry.grid(row=5, column=1)

        tk.Button(self.root, text="Add Product", command=self.add_new_product).grid(row=6, column=0, columnspan=2, pady=10)
        tk.Button(self.root, text="Check Stock Levels", command=self.check_stock_levels).grid(row=7, column=0, columnspan=2, pady=10)
        tk.Button(self.root, text="View Reorder Alerts", command=self.view_reorder_alerts).grid(row=8, column=0, columnspan=2, pady=10)
        tk.Button(self.root, text="Create Reports", command=self.create_reports).grid(row=9, column=0, columnspan=2, pady=10)
        tk.Button(self.root, text="Exit", command=self.exit_app).grid(row=10, column=0, columnspan=2, pady=10)

    def exit_app(self):
        if messagebox.askokcancel("Exit", "Are you sure you want to exit?"):
            self.root.destroy()
            InventoryManagerUI.instance = None

    def add_new_product(self):
        try:
            id = self.id_entry.get()
            name = self.name_entry.get()
            stock = int(self.stock_entry.get())
            reorder_level = int(self.reorder_entry.get())
            lead_days = int(self.lead_time_entry.get())
            sales_history = list(map(int, self.sales_history_entry.get().split(',')))

            self.manager.add_new_product(id, name, stock, reorder_level, lead_days, sales_history)
            messagebox.showinfo("Success", "Product successfully added.")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter valid numbers for Stock, Reorder Level, and Lead Time.")

    def check_stock_levels(self):
        id = self.id_entry.get()
        stock_level = self.manager.get_stock_level(id)
        if stock_level is not None:
            messagebox.showinfo("Stock Level", f"Current stock level for product {id}: {stock_level}")
        else:
            messagebox.showerror("Error", "Product not found.")

    def view_reorder_alerts(self):
        alerts = self.manager.generate_reorder_alerts()
        if alerts:
            alert_message = "\n".join(alerts)
            messagebox.showinfo("Reorder Alerts", alert_message)
        else:
            messagebox.showinfo("Reorder Alerts", "No reorder alerts.")

    def create_reports(self):
        turnover, stockouts, excess = self.manager.create_reports()
        report_message = "Inventory Turnover Rates:\n"
        for product, rate in turnover.items():
            report_message += f"{product}: {rate:.2f}\n"
        report_message += f"\nStockout Occurrences: {stockouts}\n"
        report_message += f"Overstock Costs: {excess}\n"

        messagebox.showinfo("Reports", report_message)

def main():
    if not InventoryManagerUI.instance:
        root = tk.Tk()
        app = InventoryManagerUI(root)
        root.mainloop()

if __name__ == "__main__":
    main()
